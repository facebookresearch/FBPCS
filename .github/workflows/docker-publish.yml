name: Publish OneDocker image

on:
  schedule:
    - cron: '0 17 * * 1-5'
  workflow_dispatch:
    inputs:
      name:
        description: 'Manually running this workflow will skip "Check New Commits" step and build image directly'
        default: 'Run'

env:
  DISTRO: ubuntu
  REGISTRY: ghcr.io
  LOCAL_IMAGE_NAME: fbpcs/onedocker
  RC_REGISTRY_IMAGE_NAME: ghcr.io/${{ github.repository }}/rc/onedocker
  PROD_REGISTRY_IMAGE_NAME: ghcr.io/${{ github.repository }}/onedocker
  COORDINATOR_IMAGE: ghcr.io/facebookresearch/fbpcs/coordinator:latest
  PL_CONTAINER_NAME: e2e_pl_container
  PA_CONTAINER_NAME: e2e_pa_container
  TIME_RANGE: 24 hours

jobs:

  ### Check if there are new commits for past 24 hours, return Yes if there are, otherwise No
  new_commits_check:
    runs-on: self-hosted
    name: Check New Commmits
    outputs:
      new_commits: ${{ steps.new_commits.outputs.new_commits }}
    steps:
      - uses: actions/checkout@v2

      - name: Print latest commit id
        run: echo ${{ github.sha }}

      - name: Check new commits (only for scheduled events)
        if: ${{ github.event_name == 'schedule' }}
        id: new_commits
        run: test -z $(git rev-list --after="${{ env.TIME_RANGE }}" ${{ github.sha }}) && echo "::set-output name=new_commits::no" || echo "::set-output name=new_commits::yes"

  ### Build and publish rc/onedocker image
  build_image:
    needs: new_commits_check
    if : needs.new_commits_check.outputs.new_commits == 'yes' || github.event_name == 'workflow_dispatch'
    name: Build Image
    runs-on: self-hosted
    permissions:
      contents: read
      packages: write

    steps:
      - uses: actions/checkout@v2

      - name: Remove unused images
        run: |
         docker image prune -af

      - name: Build onedocker image in rc
        run: |
          ./build-docker.sh onedocker -t rc -f

      - name: Log into registry ${{ env.REGISTRY }}
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Tag docker image
        run: |
          docker tag ${{ env.LOCAL_IMAGE_NAME }}:rc ${{ env.RC_REGISTRY_IMAGE_NAME }}:${{ github.sha }}
          docker tag ${{ env.LOCAL_IMAGE_NAME }}:rc ${{ env.RC_REGISTRY_IMAGE_NAME }}:rc

      - name: Push image with to rc registry
        run: |
          docker push --all-tags ${{ env.RC_REGISTRY_IMAGE_NAME }}

  prepare_tests:
    needs: build_image
    name: Prepare
    runs-on: self-hosted
    permissions:
      contents: read
      packages: write

    steps:
      - uses: actions/checkout@v2

      - name: Cleanup ECS running tasks and previous running results
        run: |
         ./cleanup.sh
        working-directory: ./fbpcs/tests/github/

  ### Private Lift E2E tests
  pl_test:
    name: Private Lift E2E Tests
    needs: prepare_tests
    runs-on: self-hosted
    permissions:
      contents: read
      packages: write

    steps:
     - uses: actions/checkout@v2

     - name: Log into registry ${{ env.REGISTRY }}
       uses: docker/login-action@v1
       with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

     - name: Pull coordinator image
       run: |
        docker pull ${{ env.COORDINATOR_IMAGE }}

     - name: Start container
       run: |
        ./start_container.sh ${{ env.PL_CONTAINER_NAME }} ${{ env.COORDINATOR_IMAGE }}
       working-directory: ./fbpcs/tests/github/

     - name: Lift - Create Instance
       run: |
        ./lift_run_stages.sh ${{ env.PL_CONTAINER_NAME }} create_instance
       working-directory: ./fbpcs/tests/github/

     - name: Lift - Data validation
       run: |
        ./lift_run_stages.sh ${{ env.PL_CONTAINER_NAME }} data_validation
       working-directory: ./fbpcs/tests/github/

     - name: Check Status
       timeout-minutes: 5
       run: |
        ./check_status.sh ${{ env.PL_CONTAINER_NAME }} lift
       working-directory: ./fbpcs/tests/github/

     - name: Lift - Pid shard
       run: |
        ./lift_run_stages.sh ${{ env.PL_CONTAINER_NAME }} pid_shard
       working-directory: ./fbpcs/tests/github/

     - name: Check Status
       timeout-minutes: 5
       run: |
        ./check_status.sh ${{ env.PL_CONTAINER_NAME }} lift
       working-directory: ./fbpcs/tests/github/

     - name: Lift - Pid prepare
       run: |
        ./lift_run_stages.sh ${{ env.PL_CONTAINER_NAME }} pid_prepare
       working-directory: ./fbpcs/tests/github/

     - name: Check Status
       timeout-minutes: 5
       run: |
        ./check_status.sh ${{ env.PL_CONTAINER_NAME }} lift
       working-directory: ./fbpcs/tests/github/

     - name: Lift - Id Match
       run: |
        ./lift_run_stages.sh ${{ env.PL_CONTAINER_NAME }} run_next
       working-directory: ./fbpcs/tests/github/

     - name: Check Status
       timeout-minutes: 5
       run: |
        ./check_status.sh ${{ env.PL_CONTAINER_NAME }} lift
       working-directory: ./fbpcs/tests/github/

     - name: Lift - PID export metrics
       run: |
        ./lift_run_stages.sh ${{ env.PL_CONTAINER_NAME }} pid_metric_export
       working-directory: ./fbpcs/tests/github/

     - name: Check Status
       timeout-minutes: 5
       run: |
        ./check_status.sh ${{ env.PL_CONTAINER_NAME }} lift
       working-directory: ./fbpcs/tests/github/

     - name: Lift - Prepare Compute Input
       run: |
        ./lift_run_stages.sh ${{ env.PL_CONTAINER_NAME }} prepare_compute_input
       working-directory: ./fbpcs/tests/github/

     - name: Check Status
       timeout-minutes: 5
       run: |
        ./check_status.sh ${{ env.PL_CONTAINER_NAME }} lift
       working-directory: ./fbpcs/tests/github/

     - name: Lift - Compute Metrics
       run: |
        ./lift_run_stages.sh ${{ env.PL_CONTAINER_NAME }} run_next
       working-directory: ./fbpcs/tests/github/

     - name: Check Status
       timeout-minutes: 5
       run: |
        ./check_status.sh ${{ env.PL_CONTAINER_NAME }} lift
       working-directory: ./fbpcs/tests/github/

     - name: Lift - Aggregate Shards
       run: |
        ./lift_run_stages.sh ${{ env.PL_CONTAINER_NAME }} run_next
       working-directory: ./fbpcs/tests/github/

     - name: Check Status
       timeout-minutes: 5
       run: |
        ./check_status.sh ${{ env.PL_CONTAINER_NAME }} lift
       working-directory: ./fbpcs/tests/github/

     - name: Lift - Validate Results
       run: |
        ./validate_result.sh lift
       working-directory: ./fbpcs/tests/github/

     - name: Cleanup
       run: |
        docker stop ${{ env.PL_CONTAINER_NAME }}
        docker rm ${{ env.PL_CONTAINER_NAME }}

  ### Private Attribution E2E tests
  pa_test:
    name: Private Attribution E2E Tests
    needs: prepare_tests
    runs-on: self-hosted
    permissions:
      contents: read
      packages: write

    steps:
     - uses: actions/checkout@v2

     - name: Pull coordinator image
       run: |
        docker pull ${{ env.COORDINATOR_IMAGE }}

     - name: Start container
       run: |
        ./start_container.sh ${{ env.PA_CONTAINER_NAME }} ${{ env.COORDINATOR_IMAGE }}
       working-directory: ./fbpcs/tests/github/

     - name: Attribution - Create Instance
       run: |
        ./attribution_run_stages.sh ${{ env.PA_CONTAINER_NAME }} create_instance
       working-directory: ./fbpcs/tests/github/

     - name: Attribution - Data validation
       run: |
        ./attribution_run_stages.sh ${{ env.PA_CONTAINER_NAME }} data_validation
       working-directory: ./fbpcs/tests/github/

     - name: Check Status
       timeout-minutes: 5
       run: |
        ./check_status.sh ${{ env.PA_CONTAINER_NAME }} attribution
       working-directory: ./fbpcs/tests/github/

     - name: Attribution - Id Match
       run: |
        ./attribution_run_stages.sh ${{ env.PA_CONTAINER_NAME }} run_next
       working-directory: ./fbpcs/tests/github/

     - name: Check status
       timeout-minutes: 5
       run: |
        ./check_status.sh ${{ env.PA_CONTAINER_NAME }} attribution
       working-directory: ./fbpcs/tests/github/

     - name: Attribution - PID export metrics
       run: |
        ./attribution_run_stages.sh ${{ env.PA_CONTAINER_NAME }} pid_metric_export
       working-directory: ./fbpcs/tests/github/

     - name: Check Status
       timeout-minutes: 5
       run: |
        ./check_status.sh ${{ env.PA_CONTAINER_NAME }} attribution
       working-directory: ./fbpcs/tests/github/

     - name: Attribution - Prepare Compute Input
       run: |
        ./attribution_run_stages.sh ${{ env.PA_CONTAINER_NAME }} prepare_compute_input
       working-directory: ./fbpcs/tests/github/

     - name: Check Status
       timeout-minutes: 5
       run: |
        ./check_status.sh ${{ env.PA_CONTAINER_NAME }} attribution
       working-directory: ./fbpcs/tests/github/

     - name: Attribution - Decoupled Attribution
       run: |
        ./attribution_run_stages.sh ${{ env.PA_CONTAINER_NAME }} run_next
       working-directory: ./fbpcs/tests/github/

     - name: Check Status
       timeout-minutes: 5
       run: |
        ./check_status.sh ${{ env.PA_CONTAINER_NAME }} attribution
       working-directory: ./fbpcs/tests/github/

     - name: Attribution - Decoupled Aggregation
       run: |
        ./attribution_run_stages.sh ${{ env.PA_CONTAINER_NAME }} run_next
       working-directory: ./fbpcs/tests/github/

     - name: Check Status
       timeout-minutes: 5
       run: |
        ./check_status.sh ${{ env.PA_CONTAINER_NAME }} attribution
       working-directory: ./fbpcs/tests/github/

     - name: Attribution - Aggregate Shards
       run: |
        ./attribution_run_stages.sh ${{ env.PA_CONTAINER_NAME }} run_next
       working-directory: ./fbpcs/tests/github/

     - name: Check Status
       timeout-minutes: 5
       run: |
        ./check_status.sh ${{ env.PA_CONTAINER_NAME }} attribution
       working-directory: ./fbpcs/tests/github/

     - name: Attribution - Validate Result
       run: |
        ./validate_result.sh attribution
       working-directory: ./fbpcs/tests/github/

     - name: Cleanup
       run: |
        docker stop ${{ env.PA_CONTAINER_NAME }}
        docker rm ${{ env.PA_CONTAINER_NAME }}

  ### Push rc/onedocker to onedocker
  prod_push:
    needs: [pl_test, pa_test]
    runs-on: self-hosted
    name: Push to Prod
    permissions:
      contents: read
      packages: write

    steps:
     - uses: actions/checkout@v2

     - name: Log into registry ${{ env.REGISTRY }}
       uses: docker/login-action@v1
       with:
         registry: ${{ env.REGISTRY }}
         username: ${{ github.actor }}
         password: ${{ secrets.GITHUB_TOKEN }}

     - name: Pull image from rc registry
       run: |
        docker pull ${{ env.RC_REGISTRY_IMAGE_NAME }}:${{ github.sha }}

     - name: Set output
       id: vars
       run: echo ::set-output name=ref::${GITHUB_REF##*/}

     - name: Tag image
       run: |
        docker tag ${{ env.RC_REGISTRY_IMAGE_NAME }}:${{ github.sha }} ${{ env.PROD_REGISTRY_IMAGE_NAME }}:${{ github.sha }}
        docker tag ${{ env.RC_REGISTRY_IMAGE_NAME }}:${{ github.sha }} ${{ env.PROD_REGISTRY_IMAGE_NAME }}:latest
        docker tag ${{ env.RC_REGISTRY_IMAGE_NAME }}:${{ github.sha }} ${{ env.PROD_REGISTRY_IMAGE_NAME }}:${{ steps.vars.outputs.ref }}

     - name: Push docker image to prod registry
       run: |
        docker push --all-tags ${{ env.PROD_REGISTRY_IMAGE_NAME }}
