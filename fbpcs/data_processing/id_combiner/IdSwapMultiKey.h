/*
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

#pragma once

#include <filesystem>
#include <istream>
#include <ostream>
#include <unordered_map>
#include <vector>
#include "fbpcf/io/api/BufferedReader.h"
#include "fbpcf/io/api/FileReader.h"

namespace pid::combiner {

/*
 * This chunk size has to be large enough that we don't make
 * unnecessary trips to cloud storage but small enough that
 * we don't cause OOM issues. This chunk size was chosen based
 * on the size of our containers as well as the expected size
 * of our files to fit the aforementioned constraints.
 */
constexpr size_t kBufferedReaderChunkSize = 1073741824; // 2^30

/*
 * This function implements the aggregation logic used by publisher PL run.
 * Currently, PL does not posses ability to handle duplicates. Multi-key
 * PID would introduce duplicates and this process would be required.
 */
void aggregateLiftNonIdColumns(
    std::vector<std::string> header,
    std::vector<std::vector<std::string>>& dRows);

/*
This library implements the idSwapMultiKey that is used to swap the sensitive id
in a data file with the private id generated by the pid service
*/
void idSwapMultiKey(
    std::shared_ptr<fbpcf::io::BufferedReader> dataInFilePath,
    std::shared_ptr<fbpcf::io::BufferedReader> spineIdFilePath,
    std::ostream& outFilePath,
    int32_t maxIdColumnCnt,
    std::string headerLine,
    std::string spineIdPath,
    bool isPublisherLift = false);
} // namespace pid::combiner
