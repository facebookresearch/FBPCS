#
# Autogenerated by Thrift Compiler (0.16.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys

from thrift.transport import TTransport
all_structs = []


class InvalidRequestError(TException):
    """
    Attributes:
     - external_error_message

    """


    def __init__(self, external_error_message=None,):
        super(InvalidRequestError, self).__setattr__('external_error_message', external_error_message)

    def __setattr__(self, *args):
        raise TypeError("can't modify immutable instance")

    def __delattr__(self, *args):
        raise TypeError("can't modify immutable instance")

    def __hash__(self):
        return hash(self.__class__) ^ hash((self.external_error_message, ))

    @classmethod
    def read(cls, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and cls.thrift_spec is not None:
            return iprot._fast_decode(None, iprot, [cls, cls.thrift_spec])
        iprot.readStructBegin()
        external_error_message = None
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    external_error_message = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        return cls(
            external_error_message=external_error_message,
        )

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('InvalidRequestError')
        if self.external_error_message is not None:
            oprot.writeFieldBegin('external_error_message', TType.STRING, 1)
            oprot.writeString(self.external_error_message.encode('utf-8') if sys.version_info[0] == 2 else self.external_error_message)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __str__(self):
        return repr(self)

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class InternalServerError(TException):
    """
    Attributes:
     - external_error_message

    """


    def __init__(self, external_error_message=None,):
        super(InternalServerError, self).__setattr__('external_error_message', external_error_message)

    def __setattr__(self, *args):
        raise TypeError("can't modify immutable instance")

    def __delattr__(self, *args):
        raise TypeError("can't modify immutable instance")

    def __hash__(self):
        return hash(self.__class__) ^ hash((self.external_error_message, ))

    @classmethod
    def read(cls, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and cls.thrift_spec is not None:
            return iprot._fast_decode(None, iprot, [cls, cls.thrift_spec])
        iprot.readStructBegin()
        external_error_message = None
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    external_error_message = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        return cls(
            external_error_message=external_error_message,
        )

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('InternalServerError')
        if self.external_error_message is not None:
            oprot.writeFieldBegin('external_error_message', TType.STRING, 1)
            oprot.writeString(self.external_error_message.encode('utf-8') if sys.version_info[0] == 2 else self.external_error_message)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __str__(self):
        return repr(self)

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class NotFoundError(TException):
    """
    Attributes:
     - error_message

    """


    def __init__(self, error_message=None,):
        super(NotFoundError, self).__setattr__('error_message', error_message)

    def __setattr__(self, *args):
        raise TypeError("can't modify immutable instance")

    def __delattr__(self, *args):
        raise TypeError("can't modify immutable instance")

    def __hash__(self):
        return hash(self.__class__) ^ hash((self.error_message, ))

    @classmethod
    def read(cls, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and cls.thrift_spec is not None:
            return iprot._fast_decode(None, iprot, [cls, cls.thrift_spec])
        iprot.readStructBegin()
        error_message = None
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    error_message = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        return cls(
            error_message=error_message,
        )

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('NotFoundError')
        if self.error_message is not None:
            oprot.writeFieldBegin('error_message', TType.STRING, 1)
            oprot.writeString(self.error_message.encode('utf-8') if sys.version_info[0] == 2 else self.error_message)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __str__(self):
        return repr(self)

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class PutMetadataRequest(object):
    """
    Attributes:
     - partner_id
     - entity_key
     - entity_value

    """


    def __init__(self, partner_id=None, entity_key=None, entity_value=None,):
        self.partner_id = partner_id
        self.entity_key = entity_key
        self.entity_value = entity_value

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.partner_id = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.entity_key = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.entity_value = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('PutMetadataRequest')
        if self.partner_id is not None:
            oprot.writeFieldBegin('partner_id', TType.STRING, 1)
            oprot.writeString(self.partner_id.encode('utf-8') if sys.version_info[0] == 2 else self.partner_id)
            oprot.writeFieldEnd()
        if self.entity_key is not None:
            oprot.writeFieldBegin('entity_key', TType.STRING, 2)
            oprot.writeString(self.entity_key.encode('utf-8') if sys.version_info[0] == 2 else self.entity_key)
            oprot.writeFieldEnd()
        if self.entity_value is not None:
            oprot.writeFieldBegin('entity_value', TType.STRING, 3)
            oprot.writeString(self.entity_value.encode('utf-8') if sys.version_info[0] == 2 else self.entity_value)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class PutMetadataResponse(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.BOOL:
                    self.success = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('PutMetadataResponse')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.BOOL, 1)
            oprot.writeBool(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class GetMetadataRequest(object):
    """
    Attributes:
     - partner_id
     - entity_key

    """


    def __init__(self, partner_id=None, entity_key=None,):
        self.partner_id = partner_id
        self.entity_key = entity_key

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.partner_id = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.entity_key = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GetMetadataRequest')
        if self.partner_id is not None:
            oprot.writeFieldBegin('partner_id', TType.STRING, 1)
            oprot.writeString(self.partner_id.encode('utf-8') if sys.version_info[0] == 2 else self.partner_id)
            oprot.writeFieldEnd()
        if self.entity_key is not None:
            oprot.writeFieldBegin('entity_key', TType.STRING, 2)
            oprot.writeString(self.entity_key.encode('utf-8') if sys.version_info[0] == 2 else self.entity_key)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class GetMetadataResponse(object):
    """
    Attributes:
     - entity_value

    """


    def __init__(self, entity_value=None,):
        self.entity_value = entity_value

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.entity_value = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GetMetadataResponse')
        if self.entity_value is not None:
            oprot.writeFieldBegin('entity_value', TType.STRING, 1)
            oprot.writeString(self.entity_value.encode('utf-8') if sys.version_info[0] == 2 else self.entity_value)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ListMetadataRequest(object):
    """
    Attributes:
     - partner_id
     - entity_key_start
     - entity_key_end
     - result_limit

    """


    def __init__(self, partner_id=None, entity_key_start=None, entity_key_end=None, result_limit=None,):
        self.partner_id = partner_id
        self.entity_key_start = entity_key_start
        self.entity_key_end = entity_key_end
        self.result_limit = result_limit

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.partner_id = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.entity_key_start = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.entity_key_end = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.result_limit = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ListMetadataRequest')
        if self.partner_id is not None:
            oprot.writeFieldBegin('partner_id', TType.STRING, 1)
            oprot.writeString(self.partner_id.encode('utf-8') if sys.version_info[0] == 2 else self.partner_id)
            oprot.writeFieldEnd()
        if self.entity_key_start is not None:
            oprot.writeFieldBegin('entity_key_start', TType.STRING, 2)
            oprot.writeString(self.entity_key_start.encode('utf-8') if sys.version_info[0] == 2 else self.entity_key_start)
            oprot.writeFieldEnd()
        if self.entity_key_end is not None:
            oprot.writeFieldBegin('entity_key_end', TType.STRING, 3)
            oprot.writeString(self.entity_key_end.encode('utf-8') if sys.version_info[0] == 2 else self.entity_key_end)
            oprot.writeFieldEnd()
        if self.result_limit is not None:
            oprot.writeFieldBegin('result_limit', TType.I32, 4)
            oprot.writeI32(self.result_limit)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ListMetadataResponse(object):
    """
    Attributes:
     - key_values

    """


    def __init__(self, key_values=None,):
        self.key_values = key_values

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.MAP:
                    self.key_values = {}
                    (_ktype1, _vtype2, _size0) = iprot.readMapBegin()
                    for _i4 in range(_size0):
                        _key5 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val6 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.key_values[_key5] = _val6
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ListMetadataResponse')
        if self.key_values is not None:
            oprot.writeFieldBegin('key_values', TType.MAP, 1)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.key_values))
            for kiter7, viter8 in self.key_values.items():
                oprot.writeString(kiter7.encode('utf-8') if sys.version_info[0] == 2 else kiter7)
                oprot.writeString(viter8.encode('utf-8') if sys.version_info[0] == 2 else viter8)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(InvalidRequestError)
InvalidRequestError.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'external_error_message', 'UTF8', None, ),  # 1
)
all_structs.append(InternalServerError)
InternalServerError.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'external_error_message', 'UTF8', None, ),  # 1
)
all_structs.append(NotFoundError)
NotFoundError.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'error_message', 'UTF8', None, ),  # 1
)
all_structs.append(PutMetadataRequest)
PutMetadataRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'partner_id', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'entity_key', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'entity_value', 'UTF8', None, ),  # 3
)
all_structs.append(PutMetadataResponse)
PutMetadataResponse.thrift_spec = (
    None,  # 0
    (1, TType.BOOL, 'success', None, None, ),  # 1
)
all_structs.append(GetMetadataRequest)
GetMetadataRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'partner_id', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'entity_key', 'UTF8', None, ),  # 2
)
all_structs.append(GetMetadataResponse)
GetMetadataResponse.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'entity_value', 'UTF8', None, ),  # 1
)
all_structs.append(ListMetadataRequest)
ListMetadataRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'partner_id', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'entity_key_start', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'entity_key_end', 'UTF8', None, ),  # 3
    (4, TType.I32, 'result_limit', None, None, ),  # 4
)
all_structs.append(ListMetadataResponse)
ListMetadataResponse.thrift_spec = (
    None,  # 0
    (1, TType.MAP, 'key_values', (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), None, ),  # 1
)
fix_spec(all_structs)
del all_structs
