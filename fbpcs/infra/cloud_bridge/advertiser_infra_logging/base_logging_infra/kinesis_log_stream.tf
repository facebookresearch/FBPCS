## Creates and configures Kinesis stream for collecting CloudWatch log-group logs generated by different PL event sources 
## The role is configured in a way where services that belong only to the advertiser's account can read the stream


provider "aws" {
  region = var.region
}

provider "archive" {}

terraform {
  backend "s3" {}
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = "~> 3.0"
    }
  }
}

data "aws_caller_identity" "current" {}

## Setup Kinesis Log Stream 
resource "aws_kinesis_stream" "logs_kinesis_stream" {
  name             = var.kinesis_log_stream_name
  shard_count      = 1  # Only one reader service in cloudbridge will ingest from this stream
  retention_period = 24 # Just one day is enough as cloudbridge ingestion service will run every 5 seconds
}

## Setup Kinesis read policy 
resource "aws_iam_policy" "kinesis_read_policy" {
  name = "kinesis-read-policy"

  policy = jsonencode({
    Version = "2012-10-17",
    Statement = [
      {
        Effect = "Allow",
        Action = [
          "kinesis:GetRecords",
          "kinesis:GetShardIterator"
        ]
        Resource = aws_kinesis_stream.logs_kinesis_stream.arn
      }
    ]
  })
}


## Setup Kinesis read role for any service that only belongs to the advertiser's account to assume
resource "aws_iam_role" "kinesis_read_role" {
  name = "kinesis-read-role"

  assume_role_policy = jsonencode({
    Version = "2012-10-17",
    Statement = [
      {
        Effect = "Allow",
        Principal = {
          AWS = "*",
        },
        Action = "sts:AssumeRole",
        Condition = {
          "ForAllValues:StringEquals" : {
            "aws:PrincipalAccount" = data.aws_caller_identity.current.account_id
          },
        },
      },
    ],
  })
}

## Attach the kinesis read policy to the kinesis read role
resource "aws_iam_role_policy_attachment" "kinesis_read_attachment" {
  policy_arn = aws_iam_policy.kinesis_read_policy.arn
  role       = aws_iam_role.kinesis_read_role.name
}
